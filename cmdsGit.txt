# INITIALISER : GIT INIT

- git init initialise un dépôt vide en local = crée le dossier .git qui contient les modifs, affiche :
        Initialized empty Git repository in C:/Users/sandr/Desktop/training-git/.git/


# CONFIGURER : GIT CONFIG

- git config --global (pour tout le pc) ou git config (pour le projet) des nom utilisateur et email : 
    git config --global user.name "S. L."
    git config --global user.email "aaa@aa.fr"


# PRENDRE UNE "PHOTO" DU PROJET : GIT ADD + GIT COMMIT

- fichier à mettre dans git = à commiter : git add cmdGit.txt

- vérification des fichiers à commiter avec git status, affiche :
        On branch master

        No commits yet

        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)
                new file:   cmdGit.txt

- git commit -m (-m pour ajouter un message)
    git commit "Début du projet" affiche :
        [master (root-commit) 6d744bd] Début du projet Git
        1 file changed, 31 insertions(+)
        create mode 100644 cmdGit.txt

- après une modif, ajouter la avec :
    git add nomDuFichierModifié ou git add * (pour tout le projet)git 
    puis git commit -m "nomDuCommit"


# LISTER LES COMMITS : GIT LOG

- git log affiche la liste des commits avec son identifiant + auteur + date + message
    :q pour ressortir de la liste
        commit b917a44b49f72adec111f834cdb7c34ebc0e5052 (HEAD -> master)
        Author: Sandra Lamiré <slamire@***.com>
        Date:   Sun May 19 12:18:05 2024 +0200

            Première modification

        commit 6d744bdd17d447adc941a0428ab7eed484c9e30f
        Author: Sandra Lamiré <slamire@***.com>
        Date:   Sun May 19 12:15:50 2024 +0200

            Début du projet Git


# REVENIR A UN COMMIT PRECEDENT : GIT CHECKOUT

checkout = extraction
- git checkout identifiantDuCommit : 
    git log :
        commit 52d6f6a9eaef48e0f4a9c624da5d239e32731044 (HEAD -> master)
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 12:52:00 2024 +0200

            modification à supprimer

        commit b917a44b49f72adec111f834cdb7c34ebc0e5052
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 12:18:05 2024 +0200

            Première modification

    git checkout b917a44b49f72adec111f834cdb7c34ebc0e5052
        Note: switching to 'b917a44b49f72adec111f834cdb7c34ebc0e5052'.

        You are in 'detached HEAD' state. You can look around, make experimental
        changes and commit them, and you can discard any commits you make in this
        state without impacting any branches by switching back to a branch.     

        If you want to create a new branch to retain commits you create, you may
        do so (now or later) by using -c with the switch command. Example:      

        git switch -c <new-branch-name>

        Or undo this operation with:

        git switch -

        Turn off this advice by setting config variable advice.detachedHead to false

        HEAD is now at b917a44 Première modification
    git log :
        commit b917a44b49f72adec111f834cdb7c34ebc0e5052 (HEAD)
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 12:18:05 2024 +0200

            Première modification

        commit 6d744bdd17d447adc941a0428ab7eed484c9e30f
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 12:15:50 2024 +0200

            Début du projet Git

- on se retrouve en mode HEAD detached at b917a44 = on est plus sur une branche
HEAD est un pointeur mobile qui peut pointer vers n’importe quel commit.

si modifs sur le projets qu'on veux finalement ne pas garder
    git checkout master -f pour extraire la branche main et y revenir sans les dernières modifs locales non commitées


# BRANCHES : GIT BRANCH + GIT CHECKOUT

- git branch pour liste des branches
- git branch dev pour créer une branche dev
- git checkout nomDeLaBranche pour passer sur la branche voulue
    git checkout dev
        Switched to branch 'dev'
        M       cmdGit.txt

les commits futurs ne seront que sur cette branche jusqu'à la fusion des branches

- git checkout master + git log ne montrent pas les commits de la branche dev:
        commit daaec41a000b87c93e96faab994f5d33e02411d0 (HEAD -> master)
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 14:11:10 2024 +0200

            Ajout d'un fichier

- git checkout dev + git log montrent les commits de la branche dev + la position du HEAD et de chaque branche:
        commit b2d007e5ef9e217859c5e58ab503760f7013d1bc (HEAD -> dev)
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 14:22:24 2024 +0200

            Ajout d'un commit sur branche dev

        commit daaec41a000b87c93e96faab994f5d33e02411d0 (master)
        Author: Sandra Lamiré <slamire@sensingvision.com>
        Date:   Sun May 19 14:11:10 2024 +0200

            Ajout d'un fichier


# FUSION DE BRANCHES : GIT MERGE

- git checkout master poue se positionner sur la branche qui va recevoir les modifs finales
- git merge dev pour passer les modifs de dev sur master
	Updating daaec41..1c21ef3
	Fast-forward
 	cmdsAconfirmer.txt        | 18 ++++++++++++++++++
 	cmdGit.txt => cmdsGit.txt | 45 +++++++++++++++++++++++++++------------------
 	new.txt                   |  0
 	3 files changed, 45 insertions(+), 18 deletions(-)
 	create mode 100644 cmdsAconfirmer.txt
 	rename cmdGit.txt => cmdsGit.txt (73%)
 	delete mode 100644 new.txt

- git branch -d dev pour supprimer la branche dev après


# RESOLUTION DE CONFLIT

MERGE CONFLIT








